AWSTemplateFormatVersion: "2010-09-09"
Resources:
    RDSDBInstance:
        Type: "AWS::RDS::DBInstance"
        Properties:
            DBInstanceIdentifier: "demo-0618-db"
            AllocatedStorage: 20
            DBInstanceClass: "db.t2.micro"
            Engine: "mysql"
            MasterUsername: "admin"
            MasterUserPassword: 
            DBName: "demo_0618_db"
            PreferredBackupWindow: "19:46-20:16"
            BackupRetentionPeriod: 7
            AvailabilityZone: !Sub "${AWS::Region}a"
            PreferredMaintenanceWindow: "sat:15:42-sat:16:12"
            MultiAZ: false
            EngineVersion: "8.0.25"
            AutoMinorVersionUpgrade: true
            LicenseModel: "general-public-license"
            PubliclyAccessible: false
            StorageType: "gp2"
            Port: 3306
            StorageEncrypted: false
            CopyTagsToSnapshot: true
            MonitoringInterval: 0
            EnableIAMDatabaseAuthentication: false
            EnablePerformanceInsights: false
            DeletionProtection: false
            DBSubnetGroupName: "demo_0618_subg"
            VPCSecurityGroups: 
              - !Ref EC2SecurityGroup
            MaxAllocatedStorage: 1000
            DBParameterGroupName: "default.mysql8.0"
            OptionGroupName: "default:mysql-8-0"
            EnableCloudwatchLogsExports: 
              - "audit"
              - "error"
              - "general"
              - "slowquery"
            CACertificateIdentifier: "rds-ca-2019"

    RDSDBSubnetGroup:
        Type: "AWS::RDS::DBSubnetGroup"
        Properties:
            DBSubnetGroupDescription: "demo_0618_subg"
            DBSubnetGroupName: "demo_0618_subg"
            SubnetIds: 
              - "subnet-08d1f61612d7ac624"
              - "subnet-03e6b5caf01e04c61"

    S3Bucket:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: "demo0619-buket"

    EC2Instance:
        Type: "AWS::EC2::Instance"
        Properties:
            ImageId: "ami-001f026eaf69770b4"
            InstanceType: "t2.micro"
            KeyName: "training-dev-keypair"
            AvailabilityZone: !Sub "${AWS::Region}c"
            Tenancy: "default"
            SubnetId: "subnet-0d6ceec183ccaf509"
            EbsOptimized: false
            SecurityGroupIds: 
              - "sg-05b8ec7443e3ccb08"
            SourceDestCheck: true
            BlockDeviceMappings: 
              - 
                DeviceName: "/dev/xvda"
                Ebs: 
                    Encrypted: false
                    VolumeSize: 8
                    SnapshotId: "snap-0adf27284ff3d5b58"
                    VolumeType: "gp2"
                    DeleteOnTermination: false
            IamInstanceProfile: "full-s3"
            Tags: 
              - 
                Key: "Name"
                Value: "demo_0618_ec2_a"
            HibernationOptions: 
                Configured: false
            EnclaveOptions: 
                Enabled: false

    ElasticLoadBalancingV2LoadBalancer:
        Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
        Properties:
            Name: "kadai7-8kai-alb"
            Scheme: "internet-facing"
            Type: "application"
            Subnets: 
              - "subnet-099aca67ab838f3d6"
              - "subnet-0d6ceec183ccaf509"
            SecurityGroups: 
              - "sg-0eccac53d1cf1c355"
            IpAddressType: "ipv4"
            LoadBalancerAttributes: 
              - 
                Key: "access_logs.s3.enabled"
                Value: "false"
              - 
                Key: "idle_timeout.timeout_seconds"
                Value: "60"
              - 
                Key: "deletion_protection.enabled"
                Value: "false"
              - 
                Key: "routing.http2.enabled"
                Value: "true"
              - 
                Key: "routing.http.drop_invalid_header_fields.enabled"
                Value: "false"
              - 
                Key: "routing.http.desync_mitigation_mode"
                Value: "defensive"
              - 
                Key: "waf.fail_open.enabled"
                Value: "false"

    ElasticLoadBalancingV2Listener:
        Type: "AWS::ElasticLoadBalancingV2::Listener"
        Properties:
            LoadBalancerArn: !Ref ElasticLoadBalancingV2LoadBalancer
            Port: 80
            Protocol: "HTTP"
            DefaultActions: 
              - 
                TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup
                Type: "forward"

    EC2SecurityGroup:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "demo_0618_private"
            GroupName: "demo_0618_private"
            Tags: 
              - 
                Key: "Name"
                Value: "demo_0618_private"
            VpcId: "vpc-0312bb5fd49239557"
            SecurityGroupIngress: 
              - 
                SourceSecurityGroupId: "sg-05b8ec7443e3ccb08"
                SourceSecurityGroupOwnerId: !Ref AWS::AccountId
                Description: "allow from sg-demo_0618"
                FromPort: 3306
                IpProtocol: "tcp"
                ToPort: 3306
            SecurityGroupEgress: 
              - 
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"

    ElasticLoadBalancingV2TargetGroup:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties:
            HealthCheckIntervalSeconds: 30
            HealthCheckPath: "/"
            Port: 80
            Protocol: "HTTP"
            HealthCheckPort: "traffic-port"
            HealthCheckProtocol: "HTTP"
            HealthCheckTimeoutSeconds: 5
            UnhealthyThresholdCount: 2
            TargetType: "instance"
            Matcher: 
                HttpCode: "200"
            HealthyThresholdCount: 5
            VpcId: "vpc-0312bb5fd49239557"
            Name: "kadai7-8-tg"
            HealthCheckEnabled: true
            TargetGroupAttributes: 
              - 
                Key: "stickiness.enabled"
                Value: "false"
              - 
                Key: "deregistration_delay.timeout_seconds"
                Value: "300"
              - 
                Key: "stickiness.app_cookie.cookie_name"
                Value: ""
              - 
                Key: "stickiness.type"
                Value: "lb_cookie"
              - 
                Key: "stickiness.lb_cookie.duration_seconds"
                Value: "86400"
              - 
                Key: "slow_start.duration_seconds"
                Value: "0"
              - 
                Key: "stickiness.app_cookie.duration_seconds"
                Value: "86400"
              - 
                Key: "load_balancing.algorithm.type"
                Value: "round_robin"
            Targets: 
              - 
                Id: !Ref EC2Instance
                Port: 3000

    ElasticLoadBalancingV2TargetGroup2:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties:
            HealthCheckIntervalSeconds: 30
            HealthCheckPath: "/"
            Port: 80
            Protocol: "HTTP"
            HealthCheckPort: "traffic-port"
            HealthCheckProtocol: "HTTP"
            HealthCheckTimeoutSeconds: 5
            UnhealthyThresholdCount: 2
            TargetType: "instance"
            Matcher: 
                HttpCode: "200"
            HealthyThresholdCount: 5
            VpcId: "vpc-0312bb5fd49239557"
            Name: "demo-0618-rg"
            HealthCheckEnabled: true
            TargetGroupAttributes: 
              - 
                Key: "stickiness.enabled"
                Value: "false"
              - 
                Key: "deregistration_delay.timeout_seconds"
                Value: "300"
              - 
                Key: "stickiness.app_cookie.cookie_name"
                Value: ""
              - 
                Key: "stickiness.type"
                Value: "lb_cookie"
              - 
                Key: "stickiness.lb_cookie.duration_seconds"
                Value: "86400"
              - 
                Key: "slow_start.duration_seconds"
                Value: "0"
              - 
                Key: "stickiness.app_cookie.duration_seconds"
                Value: "86400"
              - 
                Key: "load_balancing.algorithm.type"
                Value: "round_robin"
            Targets: 
              - 
                Id: !Ref EC2Instance
                Port: 80

    ElasticLoadBalancingV2TargetGroup3:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties:
            HealthCheckIntervalSeconds: 30
            HealthCheckPath: "/"
            Port: 80
            Protocol: "HTTP"
            HealthCheckPort: "traffic-port"
            HealthCheckProtocol: "HTTP"
            HealthCheckTimeoutSeconds: 5
            UnhealthyThresholdCount: 2
            TargetType: "instance"
            Matcher: 
                HttpCode: "200"
            HealthyThresholdCount: 5
            VpcId: "vpc-0312bb5fd49239557"
            Name: "demo-0618-tg"
            HealthCheckEnabled: true
            TargetGroupAttributes: 
              - 
                Key: "stickiness.enabled"
                Value: "false"
              - 
                Key: "deregistration_delay.timeout_seconds"
                Value: "300"
              - 
                Key: "stickiness.app_cookie.cookie_name"
                Value: ""
              - 
                Key: "stickiness.type"
                Value: "lb_cookie"
              - 
                Key: "stickiness.lb_cookie.duration_seconds"
                Value: "86400"
              - 
                Key: "slow_start.duration_seconds"
                Value: "0"
              - 
                Key: "stickiness.app_cookie.duration_seconds"
                Value: "86400"
              - 
                Key: "load_balancing.algorithm.type"
                Value: "round_robin"
            Targets: 
              - 
                Id: !Ref EC2Instance
                Port: 3000

    EC2Volume:
        Type: "AWS::EC2::Volume"
        Properties:
            AvailabilityZone: !GetAtt EC2Instance.AvailabilityZone
            Encrypted: false
            Size: 8
            VolumeType: "gp2"
            SnapshotId: "snap-0adf27284ff3d5b58"
            Tags: 
              - 
                Key: "Name"
                Value: "demo_0618_ec2_a"
            MultiAttachEnabled: false

    EC2Volume2:
        Type: "AWS::EC2::Volume"
        Properties:
            AvailabilityZone: !GetAtt EC2Instance.AvailabilityZone
            Encrypted: false
            Size: 8
            VolumeType: "gp2"
            SnapshotId: "snap-0adf27284ff3d5b58"
            MultiAttachEnabled: false

    EC2Volume3:
        Type: "AWS::EC2::Volume"
        Properties:
            AvailabilityZone: !GetAtt EC2Instance.AvailabilityZone
            Encrypted: false
            Size: 8
            VolumeType: "gp2"
            SnapshotId: "snap-0adf27284ff3d5b58"
            MultiAttachEnabled: false

    EC2VolumeAttachment:
        Type: "AWS::EC2::VolumeAttachment"
        Properties:
            VolumeId: !Ref EC2Volume
            InstanceId: !Ref EC2Instance
            Device: "/dev/xvda"

    EC2NetworkInterface:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: "Primary network interface"
            PrivateIpAddress: !GetAtt EC2Instance.PrivateIp
            PrivateIpAddresses: 
              - 
                PrivateIpAddress: !GetAtt EC2Instance.PrivateIp
                Primary: true
            SubnetId: "subnet-0d6ceec183ccaf509"
            SourceDestCheck: true
            Tags: 
              - 
                Key: "Name"
                Value: "demo_0618_ec2_a"
            GroupSet: 
              - "sg-05b8ec7443e3ccb08"

    EC2NetworkInterface2:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: "RDSNetworkInterface"
            PrivateIpAddress: "10.0.2.195"
            PrivateIpAddresses: 
              - 
                PrivateIpAddress: "10.0.2.195"
                Primary: true
            SubnetId: "subnet-03e6b5caf01e04c61"
            SourceDestCheck: true
            GroupSet: 
              - !Ref EC2SecurityGroup

    EC2NetworkInterface3:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: !Sub "ELB app/${ElasticLoadBalancingV2LoadBalancer.LoadBalancerName}/6edd260f2de43dd9"
            PrivateIpAddress: "10.0.1.206"
            PrivateIpAddresses: 
              - 
                PrivateIpAddress: "10.0.1.206"
                Primary: true
            SubnetId: "subnet-0d6ceec183ccaf509"
            SourceDestCheck: true
            GroupSet: 
              - !Sub "${ElasticLoadBalancingV2LoadBalancer.SecurityGroups}"

    EC2NetworkInterfaceAttachment:
        Type: "AWS::EC2::NetworkInterfaceAttachment"
        Properties:
            NetworkInterfaceId: "eni-0ab7bf28d4402ae44"
            DeviceIndex: 0
            InstanceId: !Ref EC2Instance
            DeleteOnTermination: true
# Pull Request します。　添削お願いします！
